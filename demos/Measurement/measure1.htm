<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>测量功能</title>
    <link href="../../libs/ol/ol.css" rel="stylesheet" type="text/css" />
    <script src="../../libs/ol/ol.js" type="text/javascript"></script>
    <script src="../../libs/jquery-1.11.2.min.js" type="text/javascript"></script>
    <style type="text/css">
        #map {
            width: 100%;
            height: 100%;
            position: absolute;
        }

        #menu {
            float: left;
            position: absolute;
            bottom: 10px;
            left: 10px;
            z-index: 2000;
        }

        .checkbox {
            left: 20px;
        }

        .tooltip {
            position: relative;
            background: rgba(0,0,0,0.5);
            border-radius: 4px;
            color: white;
            padding: 4px 8px;
            opacity: 0.7;
            white-space: nowrap;
        }

        .tooltip-measure {
            opacity: 1;
            font-weight: bold;
        }

        .tooltip-static {
            background-color: #ffcc33;
            color: black;
            border: 1px solid white;
        }
        .tooltip-measure::before, .tooltip-static::before {
            border-top: 6px solid rgba(0,0,0,0.5);
            border-right: 6px solid transparent;
            border-left: 6px solid transparent;
            content: "";
            position: absolute;
            bottom: -6px;
            margin-left: -7px;
            left: 50%;
        }

        .tooltip-static::before {
            border-top-color: #ffcc33;
        }
    </style>
</head>
<body>
    <div id="map">
        <div id="menu">
            <label>Geometry type &nbsp;</label>
            <select id="type">
                <option value="length">Length</option>
                <option value="area">Area</option>
            </select>
            <br>
            <label class="checkbox"><input type="checkbox"id="geodesic"/>use geodesic measure</label>
        </div>
    </div>
    <script type="text/javascript">
        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            loadTilesWhileAnimating: true,
            view:new ol.View({
                center: [0, 0],
                zoom: 2
            })
        });
        var source = new ol.source.Vector();
        var vector = new ol.layer.Vector({
            source: source,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color:'rgba（255，255，255，0.2）'
                }),
                stroke: new ol.style.Stroke({
                    color:'#ffcc33',
                    width:2
                }),
                image: new ol.style.Circle({
                    radius: 7,
                    fill: new ol.style.Fill({
                        color:"#ffcc33"
                    })
                })
            })
        });
        map.addLayer(vector);
        var geodesicCheckbox = document.getElementById("geodesic");
        var typeSelect = document.getElementById("type");
        var draw;
        var sketch;
        typeSelect.onchange = function (e) {
            map.removeInteraction(draw);
            addInteraction();
        };
        addInteraction();
        function addInteraction() {
            var type = (typeSelect.value == "area" ? "Polygon" : "LineString");
            draw = new ol.interaction.Draw({
                source: source,
                type: (type),
                style: new ol.style.Style({
                    //fill:null
                    fill: new ol.style.Fill({
                        color: "rgba(255,255,255,0.2)"
                    }),
                    stroke: new ol.style.Stroke({
                        color: "rgba(0,0,0,0.5)",
                        lineDash: [10, 10],
                        width: 2
                    }),
                    image: new ol.style.Circle({
                        radius: 5,
                        stroke: new ol.style.Stroke({
                            color: "rgba(0,0,0,0.7)",
                        }),
                        //fill:null
                        fill: new ol.style.Fill({
                            color: "rgba(255，255，255，0.2）"
                        })
                    })
                })
            });
            map.addInteraction(draw);
            createMeasureTooltip();
            createHelpTooltip();
            var listener;
            draw.on('drawstart',
                function (evt) {
                    sketch = evt.feature;
                    var tooltipCoord = evt.coordinate;
                    listener = sketch.getGeometry().on("change", function (evt) {
                        var geom = evt.target;
                        var output;
                        if (geom instanceof ol.geom.Polygon) {
                            output = formatArea((geom));
                            tooltipCoord = geom.getInteriorPoint().getCoordinates();
                        }
                        else if (geom instanceof ol.geom.LineString) {
                            output = formatLength((geom));
                            tooltipCoord = geom.getFirstCoordinate();
                        }
                        measureTooltipElement.innerHTML = output;
                        measureTooltip.setPosition(tooltipCoord);
                    });
                }, this);
            draw.on('drawend',
                function (evt) {
                    measureTooltipElement.className = 'tooltip tooltip-static';
                    measureTooltipElement.id = 'tooltip-static';
                    measureTooltip.setOffset([0, -7]);
                    sketch = null;
                    measureTooltipElement = null;
                    createMeasureTooltip();
                    ol.Observable.unByKey(listener);
                }, this);
        }
        var helpTooltipElement;
        var helpTooltip;
        function createHelpTooltip() {
            if (helpTooltipElement) {
                helpTooltipElement.parentNode.removeChild(helpTooltipElement);
            }
            helpTooltipElement = document.createElement("div");
            helpTooltipElement.className = "tooltip hidden";
            helpTooltip = new ol.Overlay({
                element: helpTooltipElement,
                offset: [15, 0],
                positioning: "center-left"
            });
            map.addOverlay(helpTooltip);
        }
        var measureTooltipElement;
        var measureTooltip;
        function createMeasureTooltip() {
            if (measureTooltipElement) {
                measureTooltipElement.parentNode.removeChild(measureTooltipElement);
            }
            measureTooltipElement = document.createElement("div");
            measureTooltipElement.className = "tooltip tooltip-measure";
            measureTooltip = new ol.Overlay({
                element: measureTooltipElement,
                offset: [0, 15],
                positioning: "bottom-center"
            });
            map.addOverlay(measureTooltip);
        }
        var formatLength = function (line) {
            var length;
            if (geodesicCheckbox.checked) {
                var coordinates = line.getCoordinates();
                length = 0;
                var sourceProj = map.getView().getProjection();
                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                    var c1 = ol.proj.transform(Coordinates[i], sourceProj, "EPSG:4326");
                    var c2 = ol.proj.transform(Coordinates[i + 1], sourceProj, "EPSG:4326");
                    length += wgs84Sphere.haversineDistance(c1, c2);
                }
            }
            else {
                length = Math.round(line.getLength() * 100) / 100;
            }
            var output;
            if (length > 100) {
                output = (Math.round(length / 1000 * 100) / 100) + "" + "km";
            }
            else {
                output = (Math.round(length * 100) / 100) + "" + "m";
            }
            return output;
        };
        var formatArea = function (polygon) {
            var area;
            if (geodesicCheckbox.checked) {
                var sourceProj = map.getView().getProjection();
                var geom = (polygon.clone().transform(sourceProj, "EPSG:4326"));
                var coordinates = geom.getLinearRing(0).getCoordinates();
                area = Math.abs(wgs84Sphere.geodesicArea(coordinates));
            }
            else {
                area = polygon.getArea();
            }
            var output;
            if (area > 10000) {
                output = (Math.round(area / 1000000 * 100) / 100) + "" + "km<sup>2</sup>";
            }
            else {
                output = (Math.round(area * 100) / 100) + "" + "m<sup>2</sup>";
            }
            return output;
        };
        var continuePolygonMsg = "Click to continue draw the polygon";
        var continueLineMsg = "Click to continue drawing the line";
        var pointerMoveHandler = function (evt) {
            if (evt.dragging) {
                return;
            }
            var helpMsg = "Click to start drawing";
            if (sketch) {
                var geom = (sketch.getGeometry());
                if (geom instanceof ol.geom.Polygon) {
                    helpMsg = continuePolygonMsg;
                }
                else if (geom instanceof ol.geom.LineString) {
                    helpMsg = continueLineMsg;
                }
            }
            helpTooltipElement.innerHTML = helpMsg;
            helpTooltip.setPosition(evt.coordinate);
            $(helpTooltipElement).removeClass("hidden");
        };
        map.on("pointermove", pointerMoveHandler);
        $(map.getViewport()).on("mouseout", function () {
            $(helpTooltipElement).addClass("hidden");
        });
    </script>
</body>
</html>
