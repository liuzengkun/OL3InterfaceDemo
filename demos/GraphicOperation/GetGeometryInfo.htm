<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>获取几何信息</title>
    <link href="../../libs/ol/ol.css" rel="stylesheet" type="text/css" />
    <!--  引入第三方插件库 -->
    <script src="../../libs/jquery-1.11.2.min.js" type="text/javascript"></script>
    <script src="../../libs/ol/ol.js" type="text/javascript"></script>
    <!-- 引入第三方Easyui插件库 -->
    <link href="../../libs/jqueryEasyui/themes/default/easyui.css" rel="stylesheet" type="text/css" />
    <link href="../../libs/jqueryEasyui/themes/icon.css" rel="stylesheet" type="text/css" />
    <link href="../../libs/jqueryEasyui/themes/color.css" rel="stylesheet" type="text/css" />
    <script src="../../libs/jqueryEasyui/jquery.easyui.min.js" type="text/javascript"></script>
</head>
<body>
    <div id="menutitle" style="position: absolute; right: 185px; top: 120px; z-index: 9999; ">
        <div id="easymenu" class="easyui-window" data-options="title:'几何图形',inline:true,closed:false,maximizable:false,minimizable:false,closable:false,shadow:false,resizable:false"
             style="width: 350px; padding: 5px;">
            <label>
                几何图形类型：&nbsp;
            </label>
            <select id="type">
                <option value="None">无</option>
                <option value="Point" selected="selected">点</option>
                <option value="LineString">线</option>
                <option value="Polygon">多边形</option>
                <option value="Circle">圆</option>
                <option value="Square">正方形</option>
                <option value="Box">长方形</option>
            </select>
            <p>
                图形几何信息如下：
            </p>
            <div id="result" style="height: 100px; font-family: 微软雅黑; font-size: 14px; font-weight: bold;">
            </div>
        </div>
    </div>
    <div id="mapCon" style="width: 100%; height: 95%; position: absolute;">
        <div id="mouse-position" style="float: left; position: absolute; bottom: 5px; width: 350px; height: 20px; z-index: 2000;">
        </div>
    </div>
    <script type="text/javascript">
        //绘制类型对象
        var typeSelect = document.getElementById('type');
        //绘制对象
        var draw;

        //实例化Map对象加载地图,默认底图加载MapQuest地图
        var map = new ol.Map({
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM({ layer: 'sat' })
                })
            ],
            //地图容器div的ID
            target: 'mapCon',
            view: new ol.View({
                //地图初始中心点
                center: [12000000, 4000000],
                minZoom: 2,
                zoom: 3
            }),
            controls: ol.control.defaults().extend([
                new ol.control.MousePosition(
                    {
                        //显示鼠标位置信息的目标容器
                        target: document.getElementById('mouse-position'),
                        //未定义坐标的标记
                        undefinedHTML: '&nbsp;'
                    }
                )
            ])
        });

        //实例化一个矢量图层Vector作为绘制层
        var source = new ol.source.Vector({ wrapX: false });
        var vector = new ol.layer.Vector({
            source: source,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                    color: '#ffcc33',
                    width: 2
                }),
                image: new ol.style.Circle({
                    radius: 7,
                    fill: new ol.style.Fill({
                        color: '#ffcc33'
                    })
                })
            })
        });
        //将绘制层添加到地图容器中
        map.addLayer(vector);

        //根据绘制类型进行交互绘制图形处理
        function addInteraction() {
            //绘制类型
            var value = typeSelect.value;
            if (value !== 'None') {
                if (source == null) {
                    source = new ol.source.Vector({ wrapX: false });
                    //添加绘制层数据源
                    vector.setSource(source);
                }
                var geometryFunction, maxPoints;
                if (value === 'Square') {
                    value = 'Circle';
                    //正方形图形（圆）
                    geometryFunction = ol.interaction.Draw.createRegularPolygon(4);
                } else if (value === 'Box') {
                    value = 'LineString';
                    maxPoints = 2;
                    geometryFunction = function (coordinates, geometry) {
                        if (!geometry) {
                            //多边形
                            geometry = new ol.geom.Polygon(null);
                        }
                        var start = coordinates[0];
                        var end = coordinates[1];
                        geometry.setCoordinates([
                            [start, [start[0], end[1]], end, [end[0], start[1]], start]
                        ]);
                        return geometry;
                    };
                }
                //实例化交互绘制类对象并添加到地图容器中
                draw = new ol.interaction.Draw({
                    //绘制层数据源
                    source: source,
                    /** @type {ol.geom.GeometryType} */
                    //几何图形类型
                    type: (value),
                    //几何信息变更时调用函数
                    geometryFunction: geometryFunction,
                    //最大点数
                    maxPoints: maxPoints
                });
                draw.on('drawend', function (e) {
                    switch (typeSelect.value) {
                        case 'Circle':
                            var center = e.feature.getGeometry().getCenter();
                            var radius = e.feature.getGeometry().getRadius();
                            $("#result").text("");
                            $("#result").append("圆心坐标：" + center + "</br></br>圆半径为：" + radius);
                            break;
                        case 'Point':
                            var coordinates_Point = e.feature.getGeometry().getCoordinates();
                            $("#result").text("");
                            $("#result").append(coordinates_Point + "</br>");
                            break;
                        case 'LineString':
                            var coordinates_Line = e.feature.getGeometry().getCoordinates();
                            $("#result").text("");
                            for (var i = 0; i < coordinates_Line.length; i++) {
                                $("#result").append(coordinates_Line[i] + "</br>");
                            }
                            break;
                        default:
                            var coordinates_Polygon = e.feature.getGeometry().getCoordinates();
                            $("#result").text("");
                            for (var i = 0; i < coordinates_Polygon[0].length; i++) {

                                $("#result").append(coordinates_Polygon[0][i] + "</br>");
                            }
                    }
                });
                map.addInteraction(draw);
            } else {
                source = null;
                //清空绘制图形
                vector.setSource(source);
            }
        }

        /**
        * 用户更改绘制类型触发的事件.
        * @param {Event} e 更改事件
        */
        typeSelect.onchange = function (e) {
            //移除绘制图形
            map.removeInteraction(draw);
            //添加交互绘制功能控件
            addInteraction();
        };
        //添加交互绘制功能控件
        addInteraction();
    </script>
</body>
</html>
