<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>图层探查</title>
    <link href="../../libs/ol/ol.css" rel="stylesheet" type="text/css" />
    <script src="../../libs/ol/ol.js" type="text/javascript"></script>
</head>
<body>
    <div id="mapCon" class="map" style="width: 100%; height: 95%; position: absolute;">
    </div>
    <script type="text/javascript">
        //Bing地图密钥
        var key = 'Q57tupj2UBsQNQdju4xL~xBceblfTd6icjljunbuaCw~AhwA-whmGMsfIpVhslZyknWhFYq-GvWJZqBnqV8Zq1uRlI5YM_qr7_hxvdgnU7nH';
        //加载Bing地图道路数据
        var roads = new ol.layer.Tile({
            source: new ol.source.BingMaps({ key: key, imagerySet: 'Road' })
        });
        //加载Bing地图航空影像数据
        var imagery = new ol.layer.Tile({
            source: new ol.source.BingMaps({ key: key, imagerySet: 'Aerial' })
        });
        //设置地图容器放置位置
        var container = document.getElementById('mapCon');
        //创建地图容器
        var map = new ol.Map({
            layers: [roads, imagery],
            target: container,
            view: new ol.View({
                center: ol.proj.fromLonLat([-109, 46.5]),
                zoom: 6
            })
        });
        //探查半径
        var radius = 75;
        //添加键盘按下事件监听，用来控制探查范围的大小
        document.addEventListener('keydown', function (evt) {
            if (evt.which == 38) {
                radius = Math.min(radius + 5, 150);
                //map.render();
                evt.preventDefault();
            } else if (evt.which ==  40) {
                radius = Math.max(radius - 5, 25);
                map.render();
                evt.preventDefault();
            }
        });

        // 实时得到鼠标的像素位置
        var mousePosition = null;

        container.addEventListener('mousemove', function (event) {
            mousePosition = map.getEventPixel(event);
            map.render();
        });

        container.addEventListener('mouseout', function () {
            mousePosition = null;
            map.render();
        });

        // 在渲染层之前,做剪裁
        imagery.on('precompose', function (event) {
            var ctx = event.context;
            var pixelRatio = event.frameState.pixelRatio;
            ctx.save();
            ctx.beginPath();
            if (mousePosition) {
                 //只显示一个围绕着鼠标的圆圈
                ctx.arc(mousePosition[0] * pixelRatio, mousePosition[1] * pixelRatio, radius * pixelRatio, 0, 2 * Math.PI);
                ctx.lineWidth = 5 * pixelRatio;
                ctx.strokeStyle = 'rgba(0,0,0,0.5)';
                ctx.stroke();
            }
            ctx.clip();
        });

        // 呈现层后,恢复画布的背景
        imagery.on('postcompose', function (event) {
            var ctx = event.context;
            ctx.restore();
        });
    </script>
</body>
</html>
